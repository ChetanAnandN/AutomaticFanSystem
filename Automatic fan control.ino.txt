#include <Arduino.h>
#include <DHT.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <Wire.h>
#ifdef ARDUINO
#include <BluetoothSerial.h>
BluetoothSerial SerialBT;
#endif
#include <ArduinoJson.h>

// --- Pin Definitions ---
#define DHT22_PIN 14
#define DHT11_PIN 32
#define FAN_PWM_PIN 25
#define FAN_TACH_PIN 35
#define CURRENT_SENSOR_PIN 34

// I2C Pins for OLED
#define I2C_SDA 21
#define I2C_SCL 22

// OLED Settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C // Use 0x3D if needed

// Temperature Thresholds
#define TEMP_LOW_THRESHOLD 25.0
#define TEMP_HIGH_THRESHOLD 30.0
#define TEMP_MEDIUM_THRESHOLD 27.5

// Sensor Objects
DHT dht22(DHT22_PIN, DHT22);
DHT dht11(DHT11_PIN, DHT11);
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Variables
float temperature1 = 0, humidity1 = 0;
float temperature2 = 0, humidity2 = 0;
float currentConsumption = 0;
int fanSpeed = 0;
int fanRPM = 0;
volatile unsigned long tachPulseCount = 0;
unsigned long lastTachTime = 0;
unsigned long lastUpdate = 0;
unsigned long lastBTUpdate = 0;

// Constants
const float CURRENT_SENSOR_OFFSET = 2.5;
const float CURRENT_SENSOR_SENSITIVITY = 0.185;

// Function Declarations
void setupSensors();
void updateDisplay();
void readSensors();
void controlFan();
void calculateCurrent();
void calculateRPM();
void tachInterrupt();
void sendBluetoothData();

void setup() {
  Serial.begin(115200);
  Wire.begin(I2C_SDA, I2C_SCL);
  dht22.begin();
  dht11.begin();
  pinMode(FAN_PWM_PIN, OUTPUT);
  pinMode(FAN_TACH_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(FAN_TACH_PIN), tachInterrupt, FALLING);
  SerialBT.begin("SmartFan_ESP32");

  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    while (1);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Smart Fan Ready");
  display.display();
  delay(1000);
}

void loop() {
  unsigned long currentTime = millis();
  if (currentTime - lastUpdate >= 1000) {
    readSensors();
    controlFan();
    calculateCurrent();
    calculateRPM();
    updateDisplay();
    lastUpdate = currentTime;
  }

  if (currentTime - lastBTUpdate >= 2000) {
    sendBluetoothData();
    lastBTUpdate = currentTime;
  }
}

void readSensors() {
  temperature1 = dht22.readTemperature();
  humidity1 = dht22.readHumidity();
  temperature2 = dht11.readTemperature();
  humidity2 = dht11.readHumidity();
  if (isnan(temperature1)) temperature1 = 0;
  if (isnan(humidity1)) humidity1 = 0;
  if (isnan(temperature2)) temperature2 = 0;
  if (isnan(humidity2)) humidity2 = 0;
}

void controlFan() {
  float avgTemp = (temperature1 + temperature2) / 2.0;
  if (avgTemp < TEMP_LOW_THRESHOLD) fanSpeed = 0;
  else if (avgTemp >= TEMP_HIGH_THRESHOLD) fanSpeed = 255;
  else if (avgTemp >= TEMP_MEDIUM_THRESHOLD) fanSpeed = 180;
  else fanSpeed = 100;
  analogWrite(FAN_PWM_PIN, fanSpeed);
}

void calculateCurrent() {
  int sensorValue = analogRead(CURRENT_SENSOR_PIN);
  float voltage = (sensorValue * 3.3) / 4095.0;
  currentConsumption = (voltage - CURRENT_SENSOR_OFFSET) / CURRENT_SENSOR_SENSITIVITY;
  if (currentConsumption < 0) currentConsumption = 0;
}

void tachInterrupt() {
  static unsigned long lastInterrupt = 0;
  unsigned long now = millis();
  if (now - lastInterrupt > 5) {
    tachPulseCount++;
    lastInterrupt = now;
  }
}

void calculateRPM() {
  unsigned long now = millis();
  if (now - lastTachTime >= 3000) {
    fanRPM = (tachPulseCount * 60) / (3 * 2);
    tachPulseCount = 0;
    lastTachTime = now;
  }
}

void updateDisplay() {
  float avgTemp = (temperature1 + temperature2) / 2.0;
  float powerW = currentConsumption * 12.0;
  display.clearDisplay();
  display.setCursor(0, 0);
  display.printf("T:%.1fC H:%.0f%%\n", avgTemp, (humidity1 + humidity2) / 2);
  display.printf("RPM:%d P:%.1fW\n", fanRPM, powerW);
  display.printf("I:%.2fA F:%d%%\n", currentConsumption, (fanSpeed * 100) / 255);
  display.display();
}

void sendBluetoothData() {
  StaticJsonDocument<256> doc;
  doc["T"] = (temperature1 + temperature2) / 2.0;
  doc["H"] = (humidity1 + humidity2) / 2.0;
  doc["RPM"] = fanRPM;
  doc["I"] = currentConsumption;
  doc["P"] = currentConsumption * 12.0;
  doc["Fan"] = (fanSpeed * 100) / 255;
  String output;
  serializeJson(doc, output);
  SerialBT.println(output);
}
